Ans 1-
class MinStack {
    stack<pair<int,int>> st;
public:
    MinStack() {
    }
    
    void push(int val) {
        if(st.empty()) st.push({val,val});
        else{
            int mi = (val<st.top().second)?val:st.top().second;
            st.push({val,mi});
        }
    }
    
    void pop() {
        if(st.empty()) return;
        st.pop();
    }
    
    int top() {
        return st.top().first;
    }
    
    int getMin() {
        return st.top().second;
    }
};

Ans 2-
void insertSorted(stack<int>& s, int val){
   if(s.size() == 0)
   {
       s.push(val);
       return;
   }
   if(val < s.top())
   {
       int top = s.top();
       s.pop();
       insertSorted(s , val);
       s.push(top);
       return;
   }
   else{
       s.push(val);
       return;
   }
}
void SortedStack :: sort()
{
   if(s.size() == 1){
       return;
   }
   int top = s.top(); 
   s.pop();
   SortedStack::sort();
   insertSorted(s , top);
   return;
}

Ans 3-
class Solution 
{
    public:
    int calculate(string s) 
    {        
        stack<int> values;    
        int result = 0;
        int sign = 1;
        for(int i = 0; i < s.length(); i++) 
        {
            if(s[i] == ' ') continue;    
            if(isdigit(s[i])) 
            {
                int val = 0;    
                while(i < s.length() && isdigit(s[i])) 
                {
                    val = val * 10 + (s[i] - '0');
                    i++;
                }
                result+= (val * sign);
                i--;
            }
            else if(s[i] == '+') sign = 1;
            else if(s[i] == '-') sign = -1;
            else if(s[i] == '(') 
            {    
                values.push(result);
                values.push(sign);   
                result = 0;
                sign = 1;
            }
            else 
            {    
                result *= values.top();
                values.pop();
                result += values.top();
                values.pop();
            }
        }
        return result;
    }
};
Ans 4-
// I am getting error in this ques, can you please tell you to get it right...
#include<vector>
class Solution {
public:
    string removeDuplicates(string s) {
        vector<string>ans;
        for(int i=0; i<s.length(); i++)
        {
            int flag=-1;
            for(int j=i+1; j<s.length(); j++)
            {
                if(s[i]==s[j])
                    flag=1;
                    break;        
            }
            if(flag==-1)
                ans.push_back(s[i]);
        }
        return ans;
    }
};
