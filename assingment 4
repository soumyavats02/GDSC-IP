Ans 3-
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverse(ListNode* A)
    {
        ListNode* pre = NULL;
        ListNode* nxt = NULL;
        ListNode* temp = A;
        while(temp != NULL)
        {
            nxt = temp->next;
            temp->next = pre;
            pre = temp;
            temp = nxt;
        }
        return pre;
    }
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        
        l1 = reverse(l1);    //reverse l1
        l2 = reverse(l2);    //reverse l1
        
        ListNode* ans = new ListNode(0);
        ListNode* A = ans;
        int carry = 0;
        int d;
        ListNode* a = l1;
        ListNode* b = l2;
        while(a || b)
        {
            d = 0;
            if(a != NULL)
            {
                d += a->val;
                a = a->next;
            }
            if(b != NULL)
            {
                d += b->val;
                b = b->next;
            }
            d += carry;
            
            ListNode* temp = new ListNode(d%10);
            A->next = temp;
            A = A->next;
            carry = d/10;
        }
        if(carry != 0)
        {
            ListNode* temp = new ListNode(carry);
            A->next = temp;
            A = A->next;
        }
        
        A = reverse(ans->next);
        return A;
    }
};

Ans 4-
class Solution {
public:
    bool find132pattern(vector<int>& arr) {
        
        bool flag=false;
        
        int n=arr.size();
        
        vector<int>prefixMini(n);
        prefixMini[0]=arr[0];
        
        for(int i=1;i<n;i++) prefixMini[i]=min(prefixMini[i-1],arr[i]);
        
        stack<int>s;
        
        for(int j=n-1;j>=0;j--){
            
            while(s.size() > 0 && s.top() <= prefixMini[j])  // its  basically i
                s.pop();
            
            if(s.size() > 0  && s.top() < arr[j]) flag=true; //this is for k
            
            s.push(arr[j]);
        }
        
        return flag;
            
    }
};
